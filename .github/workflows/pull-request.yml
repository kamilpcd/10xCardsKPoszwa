name: Pull Request Workflow

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lintowanie kodu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Instalacja zależności
        run: npm ci

      - name: Uruchom lintowanie
        run: npm run lint:check

  unit-tests:
    name: Testy jednostkowe
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Instalacja zależności
        run: npm ci

      - name: Uruchom testy jednostkowe z pokryciem
        run: npm run test:coverage

      - name: Zachowaj raporty pokrycia kodu
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-report
          path: coverage/
          retention-days: 5
          if-no-files-found: error

  status-comment:
    name: Komentarz o statusie PR
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pobierz raporty pokrycia kodu
        uses: actions/download-artifact@v4
        if: ${{ needs.unit-tests.result == 'success' }}
        with:
          name: unit-coverage-report
          path: coverage/

      - name: Dodaj komentarz do PR
        uses: actions/github-script@v7
        with:
          script: |
            // Sprawdź status poszczególnych zadań
            const lintStatus = '${{ needs.lint.result }}';
            const testStatus = '${{ needs.unit-tests.result }}';

            // Określ ikony statusu
            const lintIcon = lintStatus === 'success' ? '✅' : '❌';
            const testIcon = testStatus === 'success' ? '✅' : '❌';

            // Określ ogólny status CI
            const isSuccess = lintStatus === 'success' && testStatus === 'success';
            const ciStatus = isSuccess ? '✅ CI zakończone pomyślnie' : '❌ CI zakończone z błędami';

            // Przygotuj treść komentarza z informacją o statusie testów
            let coverageSummary = '';
            if (testStatus === 'success') {
              try {
                const fs = require('fs');
                const summaryPath = 'coverage/coverage-summary.json';
                if (fs.existsSync(summaryPath)) {
                  const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                  const total = summary.total;
                  
                  coverageSummary = `
                  ### Pokrycie testami:
                  
                  | Kategoria | Pokrycie |
                  | --- | --- |
                  | Linie | ${total.lines.pct}% |
                  | Instrukcje | ${total.statements.pct}% |
                  | Funkcje | ${total.functions.pct}% |
                  | Gałęzie | ${total.branches.pct}% |
                  `;
                }
              } catch (error) {
                coverageSummary = `Nie udało się odczytać raportu pokrycia testami: ${error.message}`;
              }
            } else {
              coverageSummary = `Nie wygenerowano raportu pokrycia testami, ponieważ testy nie przeszły pomyślnie.`;
            }

            // Przygotuj szczegółowe informacje o błędach
            let errorDetails = '';
            if (!isSuccess) {
              errorDetails = `
              ### Szczegóły błędów:
              
              ${lintStatus !== 'success' ? `- Lintowanie: Sprawdź logi CI, aby zobaczyć błędy lintowania.` : ''}
              ${testStatus !== 'success' ? `- Testy jednostkowe: Sprawdź logi CI, aby zobaczyć błędy testów.` : ''}
              
              [Kliknij tutaj aby zobaczyć pełne logi](${context.payload.repository.html_url}/actions/runs/${context.runId})
              `;
            }

            const message = `
            ## ${ciStatus}

            - ${lintIcon} Lintowanie: ${lintStatus === 'success' ? 'Zakończone powodzeniem' : 'Zakończone niepowodzeniem'}
            - ${testIcon} Testy jednostkowe: ${testStatus === 'success' ? 'Zakończone powodzeniem' : 'Zakończone niepowodzeniem'}

            ${errorDetails}
            ${coverageSummary}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
