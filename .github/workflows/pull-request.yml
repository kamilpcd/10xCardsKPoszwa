name: Pull Request Workflow

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lintowanie kodu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Instalacja zależności
        run: npm ci

      - name: Lintowanie kodu
        run: npm run lint

  unit-test:
    name: Testy jednostkowe
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Instalacja zależności
        run: npm ci

      - name: Uruchomienie testów jednostkowych z pokryciem
        run: npm run test:coverage

      - name: Zachowanie raportu pokrycia testów
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  status-comment:
    name: Komentarz statusu PR
    needs: [lint, unit-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sprawdzenie statusu zadań
        id: check-status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.unit-test.result }}" == "success" ]]; then
            echo "workflow_status=success" >> $GITHUB_OUTPUT
          else
            echo "workflow_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Pobranie raportu pokrycia testów
        if: steps.check-status.outputs.workflow_status == 'success'
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Przygotowanie komentarza dla sukcesu
        if: steps.check-status.outputs.workflow_status == 'success'
        id: success-comment
        run: |
          COMMENT="📊 **Status PR:** ✅ Wszystkie testy przeszły pomyślnie!

          ### Pokrycie testami:
          $(cat coverage/coverage-summary.json | jq -r '\"Całkowite pokrycie: \" + (.total.statements.pct|tostring) + \"%\"')

          *Workflow wykonany w ${{ github.workflow }} (#${{ github.run_number }})*"
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT

      - name: Przygotowanie komentarza dla błędu
        if: steps.check-status.outputs.workflow_status == 'failure'
        id: failure-comment
        run: |
          COMMENT="❌ **Status PR:** Wystąpiły błędy w procesie weryfikacji!

          ### Szczegóły błędów:
          - Lintowanie: ${{ needs.lint.result }}
          - Testy jednostkowe: ${{ needs.unit-test.result }}

          Proszę zapoznać się z logami workflow aby naprawić błędy.

          *Workflow wykonany w ${{ github.workflow }} (#${{ github.run_number }})*"
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT

      - name: Dodanie komentarza do PR dla sukcesu
        if: steps.check-status.outputs.workflow_status == 'success'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          message: ${{ steps.success-comment.outputs.comment }}

      - name: Dodanie komentarza do PR dla błędu
        if: steps.check-status.outputs.workflow_status == 'failure'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          message: ${{ steps.failure-comment.outputs.comment }}
